{"version":3,"file":"option-d58f3b7e.js","sources":["../../src/components/Select/select.tsx","../../src/components/Select/option.tsx"],"sourcesContent":["import {\n  FC,\n  useState,\n  createContext,\n  useRef,\n  FunctionComponentElement,\n  useEffect,\n  Children,\n  cloneElement,\n  ReactNode,\n  MouseEvent\n} from 'react'\nimport classNames from 'classnames'\nimport { SelectOptionProps } from './option'\nimport Input from '@/components/Input'\nimport Icon from '@/components/Icon'\nimport Transition from '@/components/Transition'\nimport useClickOutside from '@/hooks/useClickOutside'\n\nexport interface SelectProps {\n  defaultValue?: string | string[]\n  placeholder?: string\n  disabled?: boolean\n  multiple?: boolean\n  name?: string\n  onChange?: (selectedValue: string, selectedValues: string[]) => void\n  onVisibleChange?: (visible: boolean) => void\n  children?: ReactNode\n}\n\nexport interface ISelectContext {\n  onSelect?: (value: string, isSelected?: boolean) => void\n  selectedValues: string[]\n  multiple?: boolean\n}\n\nexport const SelectContext = createContext<ISelectContext>({\n  selectedValues: []\n})\n\nexport const Select: FC<SelectProps> = props => {\n  const {\n    defaultValue,\n    placeholder,\n    children,\n    multiple,\n    name,\n    disabled,\n    onChange,\n    onVisibleChange\n  } = props\n\n  const input = useRef<HTMLInputElement>(null)\n  const containerRef = useRef<HTMLInputElement>(null)\n  const containerWidth = useRef(0)\n  const [selectedValues, setSelectedValues] = useState<string[]>(\n    Array.isArray(defaultValue) ? defaultValue : []\n  )\n  const [menuOpen, setOpen] = useState(false)\n  const [value, setValue] = useState(\n    typeof defaultValue === 'string' ? defaultValue : ''\n  )\n\n  const handleOptionClick = (value: string, isSelected?: boolean) => {\n    // update value\n    if (!multiple) {\n      setOpen(false)\n      setValue(value)\n      if (onVisibleChange) {\n        onVisibleChange(false)\n      }\n    } else {\n      setValue('')\n    }\n    let updatedValues = [value]\n    // click again to remove selected when is multiple mode\n    if (multiple) {\n      updatedValues = isSelected\n        ? selectedValues.filter(v => v !== value)\n        : [...selectedValues, value]\n      setSelectedValues(updatedValues)\n    }\n    if (onChange) {\n      onChange(value, updatedValues)\n    }\n  }\n  useEffect(() => {\n    // focus input\n    if (input.current) {\n      input.current.focus()\n      if (multiple && selectedValues.length > 0) {\n        input.current.placeholder = ''\n      } else {\n        if (placeholder) input.current.placeholder = placeholder\n      }\n    }\n  }, [selectedValues, multiple, placeholder])\n  useEffect(() => {\n    if (containerRef.current) {\n      containerWidth.current =\n        containerRef.current.getBoundingClientRect().width\n    }\n  })\n  useClickOutside(containerRef, () => {\n    setOpen(false)\n    if (onVisibleChange && menuOpen) {\n      onVisibleChange(false)\n    }\n  })\n  const passedContext: ISelectContext = {\n    onSelect: handleOptionClick,\n    selectedValues: selectedValues,\n    multiple: multiple\n  }\n  const handleClick = (e: MouseEvent) => {\n    e.preventDefault()\n    if (!disabled) {\n      setOpen(!menuOpen)\n      if (onVisibleChange) {\n        onVisibleChange(!menuOpen)\n      }\n    }\n  }\n  const generateOptions = () => {\n    return Children.map(children, (child, i) => {\n      const childElement = child as FunctionComponentElement<SelectOptionProps>\n      if (childElement.type.displayName === 'Option') {\n        return cloneElement(childElement, {\n          index: `select-${i}`\n        })\n      } else {\n        console.error(\n          'Warning: Select has a child which is not a Option component'\n        )\n      }\n    })\n  }\n\n  const containerClass = classNames('a-select', {\n    'menu-is-open': menuOpen,\n    'is-disabled': disabled,\n    'is-multiple': multiple\n  })\n\n  return (\n    <div className={containerClass} ref={containerRef}>\n      <div className=\"a-select-input\" onClick={handleClick}>\n        <Input\n          ref={input}\n          placeholder={placeholder}\n          value={value}\n          readOnly\n          icon=\"angle-down\"\n          disabled={disabled}\n          name={name}\n        />\n      </div>\n      <SelectContext.Provider value={passedContext}>\n        <Transition in={menuOpen} animation=\"zoom-in-top\" timeout={300}>\n          <ul className=\"a-select-dropdown\">{generateOptions()}</ul>\n        </Transition>\n      </SelectContext.Provider>\n      {multiple && (\n        <div\n          className=\"a-selected-tags\"\n          style={{ maxWidth: containerWidth.current - 32 }}\n        >\n          {selectedValues.map((value, index) => {\n            return (\n              <span className=\"a-tag\" key={`tag-${index}`}>\n                {value}\n                <Icon\n                  icon=\"times\"\n                  onClick={() => {\n                    handleOptionClick(value, true)\n                  }}\n                />\n              </span>\n            )\n          })}\n        </div>\n      )}\n    </div>\n  )\n}\nSelect.defaultProps = {\n  name: 'a-select',\n  placeholder: '请选择'\n}\nexport default Select\n","import { FC, useContext, ReactNode, MouseEvent } from 'react'\nimport classNames from 'classnames'\nimport Icon from '@/components/Icon'\nimport { SelectContext } from './select'\nexport interface SelectOptionProps {\n  index?: string\n  value: string\n  label?: string\n  disabled?: boolean\n  children?: ReactNode\n}\n\nexport const Option: FC<SelectOptionProps> = ({\n  value,\n  label,\n  disabled,\n  children,\n  index\n}) => {\n  const { onSelect, selectedValues, multiple } = useContext(SelectContext)\n  const isSelected = selectedValues.includes(value)\n\n  const classes = classNames('a-select-item', {\n    'is-disabled': disabled,\n    'is-selected': isSelected\n  })\n\n  const handleClick = (e: MouseEvent, value: string, isSelected: boolean) => {\n    e.preventDefault()\n    if (onSelect && !disabled) {\n      onSelect(value, isSelected)\n    }\n  }\n\n  return (\n    <li\n      key={index}\n      className={classes}\n      onClick={e => {\n        handleClick(e, value, isSelected)\n      }}\n    >\n      {children || (label ? label : value)}\n      {multiple && isSelected && <Icon icon=\"check\" />}\n    </li>\n  )\n}\n\nOption.displayName = 'Option'\n\nexport default Option\n"],"names":["SelectContext","createContext","Select","props","defaultValue","placeholder","children","multiple","name","disabled","onChange","onVisibleChange","input","useRef","containerRef","containerWidth","selectedValues","setSelectedValues","useState","menuOpen","setOpen","value","setValue","handleOptionClick","value2","isSelected","updatedValues","v","useEffect","useClickOutside","passedContext","handleClick","generateOptions","Children","child","i","childElement","cloneElement","containerClass","classNames","jsxs","jsx","Input","Transition","index","Icon","Select$1","Option","label","onSelect","useContext","classes","e","isSelected2","Option$1"],"mappings":"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"}